import 'dart:async';

import 'package:angular/angular.dart';

import '../tab/tab.dart';

/// Панель вкладок
///
/// Отвечает за инициализацию вкладок.
///
/// Поддерживаемые события:
///
/// * [onTabChange] - генерируется при смене вкалдки
///
/// Компонент реализует интерфейс [AfterContentInit]. Это означает, что
/// в компоненте должна быть реализован метод [ngAfterContentInit], который
/// вызывается сразу после инициализации контента компонента (когда в нем
/// уже появились компоненты вкладок). Реализация этого метода необходима
/// для инициализации вкладок после их создания.
///
/// Компонент реализует интерфейс [OnDestroy]. Это означает, что в компоненте
/// должен быть реализован метод [ngOnDestroy], который вызывается
/// непосредственно перед уничтожением компонента. В этом компоненте этот метод
/// используется для закрытия потока событий [onTabChange].
///
/// Для вставки компонента в шаблон используется элемент
/// `<tab-panel></tab-panel>`. См. index.html
@Component(
  selector: 'tab-panel', // имя тэга элемента
  templateUrl: 'tab_panel.html', // шаблон компонента
  styleUrls: ['tab_panel.css'], // стили компонента
)
class TabPanel implements AfterContentInit, OnDestroy {
  /// Список табов
  ///
  /// Благодаря аннотации `@ContentChildren(Tab)` мы автоматически получаем
  /// список табов, которые вставлены внутрь элемента `<tab-panel></tab-panel>
  /// см. шаблон компонента [Application]
  @ContentChildren(Tab)
  List<Tab> tabs;

  /// Контроллер события `onTabChange` (переключение табов)
  final _onTabChangeController = StreamController<Tab>.broadcast();

  /// Поток событий `onTabChange`
  ///
  /// Внешние компоненты могут подписываться на это событие:
  ///
  /// ```
  /// tabPanel.onTabChange.listen((tab) {
  ///   // Здесь что-то происходит при смене таба;
  /// });
  /// ```
  ///
  /// Обработчику передается новый активный таб. При желании можно доработать
  /// и сделать так, чтобы передавалось два таба: предыдущий активный и новый
  /// активный.
  ///
  /// Аннотация `@Output()` означает, что обработчик события можно назначать в
  /// шаблоне. Например:
  ///
  /// ```
  /// <tab-panel (onTabChange)="tabChangeHandler($event)">
  ///   <tab>First tab</tab>
  ///   <tab>Second tab</tab>
  ///   ...
  /// </tab-panel>
  /// ```
  /// Имя события в шаблоне заключается в круглые скобки. `tabChangeHandler` -
  /// это метод компонента, в шаблоне которого находится панель вкладок. Вместо
  /// `$event` будет передана новая активная вкладка.
  @Output()
  Stream<Tab> get onTabChange => _onTabChangeController.stream;

  /// Запускается после инициализации контента панели вкладок
  ///
  /// Метод используется для инициализации вкладок:
  ///
  /// * автоматически назначаются идентификаторы вкладок
  /// * устанавливаются обработчики событий `onActivate` для вкладок
  @override
  void ngAfterContentInit() {
    tabs.asMap().forEach((index, tab) {
      tab.id = index; // устанавливаем идентификатор
      tab.onActivate.listen((activeTab) {
        // При активации новой вкладки у остальных сбрасываем признак активности
        tabs.where((tab) => tab != activeTab).forEach((tab) {
          tab.active = false;
        });
        // Генерируем событие `onTabChange`
        _onTabChangeController.add(activeTab);
      });
    });
  }

  /// Запускается перед уничтожением компонента
  ///
  /// Перед уничтожением компонента закрываем поток событий [onTabChange]
  @override
  void ngOnDestroy() {
    _onTabChangeController.close();
  }
}
