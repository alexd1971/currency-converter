import 'dart:async';
import 'dart:html';

import 'package:angular/angular.dart';
import 'package:equatable/equatable.dart';

/// Вкладка
///
/// Для вставки вкладки в шаблон используется элемент <tab></tab>
///
/// Пример:
///
/// ```
/// <tab-panel>
///   <tab>Tab 1</tab>
///   <tab>Tab 2</tab>
/// </tab-panel>
/// ```
///
/// Поддерживаемые атрибуты:
///
/// * [active]::[bool] - устанавливает активную вкалдку
///
/// Поддерживаемые события:
///
/// * [onActivate] - генерируется при активации вкладки
///
/// К компоненту [Tab] подмешивается [EquatableMixin]. Это позволяет избавиться
/// от необходимости явно переопределять `operator ==` и `hashCode`, что обычно
/// делается при необходимости реализовать нестандартное сравнение объектов. В
/// частности в нашем примере реализована возможность прямого сравнения вкладок,
/// при котором вкладки считаются равными, если у них равны значения поля [id].
@Component(
  selector: 'tab', // имя тэга html-элемента
  templateUrl: 'tab.html', // шаблон
  styleUrls: ['tab.css'], // стили
  directives: [NgClass], // используемые в шаблоне директивы
)
class Tab with EquatableMixin implements OnDestroy {
  /// Идентификатор вкладки
  ///
  /// Инициализируется автоматически при инициализации вкладок
  /// в панели вкладок. См. компонент [TabPanel]
  int id;

  bool _active = false;

  /// Признак активности вкладки
  bool get active => _active;

  /// Устанавливает признак активности вкладки
  ///
  /// Аннотация `@Input()` указывает на то, что признак активности можно
  /// устанавливаеть через атрибуты элемента в шаблоне:
  ///
  /// ```
  /// <tab-panel>
  ///   <tab>Tab 1</tab>
  ///   <tab active>Tab 2</tab>
  /// </tab-panel>
  /// ```
  ///
  /// Также этот атрибут можно связывать с какой-нибудь переменной класса
  /// компонента, в шаблоне которого используются вкладки:
  ///
  /// ```
  /// <tab-panel>
  ///   <tab>Tab 1</tab>
  ///   <tab [active]="isActive">Tab 2</tab>
  /// </tab-panel>
  /// ```
  ///
  /// `isActive` - переменная компонента, в шаблоне которого используются
  /// вкладки. Вместо `isActive` может использоватья и более сложное выражение
  /// языка Dart, связывающее доступные в шаблоне переменные (см. шаблон
  /// компонента приложения: application.html). Доступными являются публичные
  /// переменные класса компонента, для котрого пишется шаблон, а также сущности,
  /// указанные в атрибуте `export` аннотации компонента.
  ///
  /// Для одностороннего связывания атрибута с переменной компонента имя атрибута
  /// заключается в квадратные скобки. Одностороннее связывание означает, что
  /// значение атрибута `active` становится равным значению переменной `isActive`.
  /// Но не наоборот. Иными словами любое изменение переменной `isActive` немедленно
  /// отражается на значении атрибута `active`, но изменение атрибута не приводит к
  /// изменению переменной.
  @Input()
  set active(bool active) {
    _active = active; // устанавливаем признак активности
    if (active) {
      _onActivateController.add(this); // генерируем событие `onActivate`
    }
  }

  /// Этот геттер используется для директивы [NgClass] в шаблоне компонента
  /// (см. шаблон)
  ///
  /// Возвращает [Map], ключами которого явдяются имена css-классов, а занчениями
  /// являются логические выражения определяющие добавлять этот css-класс к
  /// элементу или нет.
  ///
  /// В данном случае элементу шаблона будет добавляться css-класс
  /// `tabs__tab_active` если вкладка активная.
  Map<String, bool> get activeTabCssClass => {'tabs__tab_active': active};

  /// Контроллер событий `onActivate`
  final _onActivateController = StreamController<Tab>.broadcast();

  /// Поток событий `onActivate`
  ///
  /// О назначении аннотации `@Output()` см. компонент [TabPanel]
  @Output()
  Stream<Tab> get onActivate => _onActivateController.stream;

  /// Обработчик клика по вкладке
  ///
  /// Аннотация `@HostListener('click')` указывает, что метод [tabClick]
  /// нужно установить в качестве обработчика клика по данной вкладке
  @HostListener('click')
  void tabClick(MouseEvent e) {
    if (!active) {
      active = true; // делаем вкладку активной
      _onActivateController.add(this); // генерируем событие `onActivate`
    }
  }

  /// Параметры для [EquatableMixin]
  ///
  /// Геттер возвращает список свойств объекта (вкладки), на основании
  /// которых принимается решение о равенстве вкладок
  @override
  List<Object> get props => [id];

  /// Перед уничтожением закрывает поток событий [onActivate]
  @override
  void ngOnDestroy() {
    _onActivateController.close();
  }
}
